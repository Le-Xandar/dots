;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Westofer Raymond"
      user-mail-address "WestoferRaymond@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.

;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "Fira Code" :size 11 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 11))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;;(setq doom-theme 'doom-one)
(setq doom-theme 'doom-gruvbox)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documents/gtd/")
(setq display-line-numbers-type 'relative)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
;;
;;
;;==============================================
;;             Global key binds
;;==============================================
(map!
 :n "<f6>" 'elfeed
 ;; :n "<f7>" email TODO: Add email
 "C-h" 'backward-delete-char-untabify
 )


;; ;; Rust analyazer
;; (setq rustic-lsp-server 'rust-analyzer)
;; (custom-set-variables
;;  ;; custom-set-variables was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  '(ansi-color-names-vector
;;    ["#1b1d1e" "#ff5d38" "#98be65" "#bcd42a" "#51afef" "#c678dd" "#46D9FF" "#ede0ce"])
;;  '(fci-rule-color "#5B6268")
;;  '(jdee-db-active-breakpoint-face-colors (cons "#2b2a27" "#ff5d38"))
;;  '(jdee-db-requested-breakpoint-face-colors (cons "#2b2a27" "#98be65"))
;;  '(jdee-db-spec-breakpoint-face-colors (cons "#2b2a27" "#3f444a"))
;;  '(objed-cursor-color "#ff5d38")
;;  '(pdf-view-midnight-colors (cons "#ede0ce" "#2b2a27"))
;;  '(rustic-ansi-faces
;;    ["#2b2a27" "#ff5d38" "#98be65" "#bcd42a" "#51afef" "#c678dd" "#46D9FF" "#ede0ce"])
;;  )
;; (custom-set-faces
;;  ;; custom-set-faces was added by Custom.
;;  ;; If you edit it by hand, you could mess it up, so be careful.
;;  ;; Your init file should contain only one such instance.
;;  ;; If there is more than one, they won't work right.
;;  )

;; =====
;; company
;; =====
(setq company-dabbrev-downcase 0)
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 1)


;;npm install -g vue-language-server
;; (setq vue-mode-packages
;;   '(vue-mode))

;; (setq vue-mode-excluded-packages '())

;; (defun vue-mode/init-vue-mode ()
;;   "Initialize my package"
;;   (use-package vue-mode))
(define-derived-mode genehack-vue-mode web-mode "ghVue"
  "A major mode derived from web-mode, for editing .vue files with LSP support.")

;;https://genehack.blog/2020/08/web-mode-eglot-vetur-vuejs-=-happy/
(require 'eglot)
(add-to-list 'auto-mode-alist '("\\.vue\\'" . genehack-vue-mode))
(add-hook 'genehack-vue-mode-hook #'eglot-ensure)
(add-to-list 'eglot-server-programs '(genehack-vue-mode "vls"))



;; =====
;; org mode
;; =====
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(defun update-org-latex-fragments ()
  (org-latex-preview '(64))
  (plist-put org-format-latex-options :scale text-scale-mode-amount)
  (org-latex-preview '(16)))
(add-hook 'text-scale-mode-hook 'update-org-latex-fragments)


'(org-format-latex-options
  (quote
   (:foreground default :background default :scale 0.5 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
    ("begin" "$1" "$" "$$" "\\(" "\\["))))
(set-default 'preview-scale-function 0.2)




;; =====
;; Rust
;; =====
;; $ rustup toolchain add nightly
;; $ rustup component add rust-src
;; $ cargo +nightly install racer
(add-hook 'rust-mode-hook #'racer-mode)


;; =========
;; Neotree
;; =========
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))

;; ================
;; LaTeX
;; ================
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (TeX-fold-mode 1)
            (add-hook 'find-file-hook 'TeX-fold-buffer t t)
            (add-hook 'after-change-functions
                      (lambda (start end oldlen)
                        (when (= (- end start) 1)
                          (let ((char-point
                                 (buffer-substring-no-properties
                                  start end)))
                            (when (or (string= char-point "}")
                                      (string= char-point "$"))
                              (TeX-fold-paragraph)))))
                      t t)))
(add-hook 'TeX-mode-hook #'TeX-fold-mode)



;; ===========================
;; Compile on save
;; ===========================

(defun compile-on-save-start ()
  (let ((buffer (compilation-find-buffer)))
    (unless (get-buffer-process buffer)
      (recompile))))

(define-minor-mode compile-on-save-mode
  "Minor mode to automatically call `recompile' whenever the
current buffer is saved. When there is ongoing compilation,
nothing happens."
  :lighter " CoS"
  (if compile-on-save-mode
      (progn  (make-local-variable 'after-save-hook)
              (add-hook 'after-save-hook 'compile-on-save-start nil t))
    (kill-local-variable 'after-save-hook)))


;; Elfeed
;;
(elfeed-org)
;;setup default filter
(setq-default elfeed-search-filter "@1-week-ago")

;;source of feeds
(setq rmh-elfeed-org-files (list "~/.doom.d/elfeed.org"))

;; Set up the url-queue variables for swift and complete operation. The
;; defaults are too bad. Especially /url-queue-timeout/ is way too short
;; for loading feeds.
(setf url-queue-parallel-processes 20
      url-queue-timeout 10)

;; setup key maps
(map!  :map elfeed-search-mode-map
       :n "v" 'elfeed-view-mpv
       :n "R" 'elfeed-update
       :n "G" 'evil-goto-line
       :n "<f6>" 'elfeed-close-prev-buffer
       :n "b" 'elfeed-search-browse-url
       :n "c" 'elfeed-search-clear-filter
       )

;;;;; util functions

;; closing elfeed forwards to homepage
(defun elfeed-close-prev-buffer ()
  (interactive)
  "elfeed kill and restore prev buffer"
  (elfeed-kill-buffer)
  (previous-buffer))
(defun gk-feeds-youtube (hash)
  "Return the feed URL for the channel with HASH."
  (concat "http://www.youtube.com/feeds/videos.xml?channel_id=" hash))

(defun gk-feeds-youtube-pl (playlist-id)
  "Return the feed URL for the playlist with PLAYLIST-ID."
  (concat
   "https://www.youtube.com/feeds/videos.xml?playlist_id="
   playlist-id))

(defun gk-elfeed-browse-article ()
  "View elfeed article with EWW."
  (interactive)
  (let ((link (elfeed-entry-link elfeed-show-entry)))
    (message "elfeed: Opened in browser: %s" link)
    (eww link)))

(defun gk-elfeed-catch-up ()
  "C-x h, r, g in *elfeed-search* buffer."
  (interactive)
  (when (y-or-n-p "Catch-up on visible entries?")
    (mark-whole-buffer)
    (elfeed-search-untag-all-unread)
    (elfeed-search-update--force)))

(defun gk-elfeed-backup ()
  (interactive)
  (let ((name (gk-backup-file-name (dropbox "Backups/OPML/") "opml")))
    (elfeed-export-opml name)
    (message "Wrote %s." name)))

(defun gk-elfeed-filter (filter)
  "Set search filter, do not update live.
It is rather slow to do so."
  (interactive (list (read-string "Filter: " elfeed-search-filter)))
  (setq elfeed-search-filter filter)
  (elfeed-search-update :force))

(defun gk-elfeed-search-kill-url ()
  "Copy the URL for entry under point as kill."
  (interactive)
  (dolist (entry (elfeed-search-selected))
    (when-let* ((link (elfeed-entry-link entry)))
      (with-temp-buffer
        (insert link)
        (clipboard-kill-ring-save (point-min) (point-max))
        (message link)))))

(defalias 'gk-elfeed-next 'next-logical-line)
(defalias 'gk-elfeed-prev 'previous-logical-line)

(defun gk-elfeed-search-mode-hook ()
  )

(add-hook 'elfeed-show-mode-hook 'gk-eww-mode-hook)
(add-hook 'elfeed-search-mode-hook 'gk-elfeed-search-mode-hook)


;;;;;; Keys:

(define-key elfeed-show-mode-map (kbd "v") #'gk-elfeed-browse-article)
(define-key elfeed-show-mode-map (kbd "!") #'gk-eww-download)
(define-key elfeed-search-mode-map (kbd "c") #'gk-elfeed-catch-up)
(define-key elfeed-search-mode-map (kbd "e") #'gk-elfeed-backup)
(define-key elfeed-search-mode-map (kbd "s") #'gk-elfeed-filter)
(define-key elfeed-search-mode-map (kbd "J") #'elfeed-unjam)
(define-key elfeed-search-mode-map (kbd "n") #'gk-elfeed-next)
(define-key elfeed-search-mode-map (kbd "p") #'gk-elfeed-prev)
(define-key elfeed-search-mode-map (kbd "w") #'gk-elfeed-search-kill-url)


;;;;;; Search ring:

;; Go cycling a list of tags in the search mode.

(defvar gk-elfeed-search-ring-tags nil)

(defvar-local gk-elfeed-search-ring-current-search nil)

(defun gk-elfeed-search-ring-next ()
  (interactive)
  (let ((search (or (cadr (member gk-elfeed-search-ring-current-search
                                  gk-elfeed-search-ring-tags))
                    (car gk-elfeed-search-ring-tags))))
    (gk-elfeed-filter
     (concat gk-elfeed-default-filter
             (setf gk-elfeed-search-ring-current-search search)))))

(defun gk-elfeed-search-ring-previous ()
  (interactive)
  (gk-elfeed-filter
   (concat gk-elfeed-default-filter
           (setf
            gk-elfeed-search-ring-current-search
            (if (or (not gk-elfeed-search-ring-current-search)
                    (string= gk-elfeed-search-ring-current-search
                             (car gk-elfeed-search-ring-tags)))
                (car (last gk-elfeed-search-ring-tags))
              (nth (1- (or (position
                            gk-elfeed-search-ring-current-search
                            gk-elfeed-search-ring-tags
                            :test #'equal)
                           (length gk-elfeed-search-ring-tags)))
                   gk-elfeed-search-ring-tags))))))

(define-key elfeed-search-mode-map [?k] 'gk-elfeed-search-ring-previous)
(define-key elfeed-search-mode-map [?j] 'gk-elfeed-search-ring-next)


;;;;;; Faces:

(mapc
 (lambda (x) (apply #'set-face-attribute x))
 `((elfeed-search-title-face nil :foreground "normal" :strike-through t)
   (elfeed-search-unread-title-face nil :foreground "normal" :strike-through nil)
   (elfeed-search-tag-face nil :foreground "normal")
   (elfeed-search-date-face nil :foreground "normal")
   (elfeed-search-feed-face nil :foreground "normal" :weight bold)
   (elfeed-search-unread-count-face nil :foreground nil)))


;;;;;; Scoring:

;; Adapted from http://kitchingroup.cheme.cmu.edu/blog/2017/01/05/Scoring-elfeed-articles/

(defface gk-relevant-elfeed-entry `()
  "Marks a relevant Elfeed entry.")

(defface gk-important-elfeed-entry `()
  "Marks an important Elfeed entry.")

(push '(relevant gk-relevant-elfeed-entry)
      elfeed-search-face-alist)

(push '(important gk-important-elfeed-entry)
      elfeed-search-face-alist)

(defvar gk-elfeed-scoring-patterns
  nil
  "Patterns for scoring Elfeed entries.
An association list where car is a regexp to match the title or
the body of the entry, and the cdr is the score, an integer.")

(defun gk-score-elfeed-entry (entry)
  (let ((title (elfeed-entry-title entry))
        (content (elfeed-deref (elfeed-entry-content entry)))
        (score 0))
    (let ((case-fold-search t))
      (loop for (pattern . n) in gk-elfeed-scoring-patterns
            if (string-match pattern title)
            do (incf score n)
            if (string-match pattern content)
            do (incf score n)))

    ;; store score for later in case I ever integrate machine learning
    (setf (elfeed-meta entry :my/score) score)

    ;; (cond
    ;;  ((= score 1)
    ;;   (elfeed-tag entry 'relevant))
    ;;  ((> score 1)
    ;;   (elfeed-tag entry 'important)))
    ;;
    ;; XXX(2018-12-21): this is an experiment where anything that’s
    ;; relevant is also important, given the distinction is irrelevant
    ;; given the scale.
    (when (>= score 1)
      (elfeed-tag entry 'relevant)
      (elfeed-tag entry 'important))
    entry))

(add-hook 'elfeed-new-entry-hook 'gk-score-elfeed-entry)


;;;;;; Show mode:

(add-hook
 'elfeed-show-mode-hook
 (defun gk-elfeed-show-mode-hook ()
   "Hook for ‘elfeed-show-mode’."
   (setq-local truncate-lines nil)
   (setq-local word-wrap t)))




(defun elfeed-v-mpv (url title)
  "Watch a video from URL in MPV"
  (defvar cmd (format "mpv --ytdl-format=worst  '%s'" url))
  (save-window-excursion
    (async-shell-command cmd)
    (save-window-excursion
      (shell-command (format"notify-send 'Loading Video' '%s'" title)))
    (message "Video Loading")
    )
  )

(defun elfeed-view-mpv (&optional use-generic-p)
  "Youtube-feed link"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (elfeed-v-mpv it (elfeed-entry-title entry))) ;; print title
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(define-key elfeed-search-mode-map  "v"  'elfeed-view-mpv)


;;; config.el.bak ends here
