# -*- eval:(org-content 2) -*-
#+TITLE: Config
#+STARTUP: content

* Info
#+begin_src emacs-lisp
;; DOOMDIR/config.el -*- lexical-binding: t; -*-
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
;;
#+end_src
* Global Settings
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!
** Private Config
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp

(setq user-full-name "Westofer Raymond"
      user-mail-address "WestoferRaymond@gmail.com")

#+end_src
** Start as a server
#+begin_src emacs-lisp
(server-start)
#+end_src
**  UI

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ src_lisp{doom-font'}
+ src_lisp{doom-variable-pitch-font'}
+ src_lisp{doom-big-font'} -- used for `doom-big-font-mode'; use this for
presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
*** Font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "sans" :size 11))
;;(setq doom-font (font-spec :family "Open Sans" :size 12 :weight 'regular)
;;doom-variable-pitch-font (font-spec :family "sans" :size 12))
#+end_src
*** Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set src_elisp{`doom-theme'} or manually load a theme
with the src_elisp{`load-theme'} function. This is the default src_elisp{(setq
                                                                          doom-theme 'doom-one)}
#+begin_src emacs-lisp
(setq doom-theme 'doom-vibrant)
#+end_src
*** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 't)
#+end_src
*** Neotree
Use Icons
#+begin_src emacs-lisp
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+end_src
** KeyBinds
*** Function row <F-{1-12}>
#+begin_src emacs-lisp
(map!
 ;; :n "<f5>" compile TODO: add compile
 :n "C-<f5>" 'compile-on-save-mode
 :n "<f6>" 'elfeed
 :n "<f8>" 'org-agenda
 ;; :n "<f7>" email TODO: Add email
 )
#+end_src
*** Function row With Modifiers <F-{1-12}>
#+begin_src emacs-lisp
(map!
 :n "C-<f5>" 'compile-on-save-mode
 )
#+end_src
*** Text Manipulation
**** C-h as backspace
#+begin_src emacs-lisp
(map! "C-h" 'backward-delete-char-untabify)
#+end_src
**** ediff init and example
#+begin_src emacs-lisp
(defun doom/ediff-init-and-example ()
  "ediff the current `init.el' with the example in doom-emacs-dir"
  (interactive)
  (ediff-files (concat doom-private-dir "init.el")
               (concat doom-emacs-dir "init.example.el")))

(define-key! help-map
  "di"   #'doom/ediff-init-and-example
  )
#+end_src
** Fill column
#+begin_src emacs-lisp
(setq-default fill-column 80)
#+end_src
** Scroll
#+begin_src emacs-lisp
(setq scroll-conservatively 10)
(setq scroll-margin 5)
#+end_src
** Modes
Global Mixed Pitch  mode!
#+begin_src emacs-lisp
;;(add-hook 'text-mode-hook 'mixed-pitch-mode)
#+end_src

* Org-Mode
** UI
*** hide the emphasis markup (e.g. /.../ for italics, *...* for bold, etc.):
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src
*** Fonts
#+begin_src emacs-lisp :tangle no
(let* ((variable-tuple
        (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
              ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
              ((x-list-fonts "Verdana")         '(:font "Verdana"))
              ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
              (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
#+end_src
** ROAM
*** Setup
#+begin_src emacs-lisp
(use-package org-roam-server
  :after org-roam
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8078
        org-roam-server-export-inline-images t
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20)
  (defun org-roam-server-open ()
    "Ensure the server is active, then open the roam graph."
    (interactive)
    (unless (server-running-p)
      (org-roam-server-mode 1))
    (browse-url-xdg-open (format "http://localhost:%d" org-roam-server-port))))
#+end_src
*** Set Directory
#+begin_src emacs-lisp
(setq org-roam-directory "~/Documents/roam/")
#+end_src
*** Deft
#+begin_src emacs-lisp
(setq deft-directory "~/Documents/roam")
(setq deft-extensions '("md" "tex" "org"))
(setq deft-recursive t)
#+end_src
*** Dailies Template
me is Smurt
#+begin_src emacs-lisp
    (setq org-roam-dailies-capture-templates
          (let ((head "\
#+title: %<%Y-%m-%d (%A)>\
\n#+startup: showall\
\n#+ROAM_TAGS: dailies\
 \n* Do Today [/][%]\
 \n** On My Mind\
 \n** Motivation\
 \n* Evening Checkin\
 \n** Daily Score\
 \n** Today I Learned\
 \n** One Thing Achieved\
 \n* Journal :journal:\
 \n* carried to [[file:%<%Y-%m-%d>.org][%<%Y-%m-%d>]]"))
            `(("j" "journal" entry
               #'org-roam-capture--get-point
               "* %<%H:%M> %?"
               :file-name "daily/%<%Y-%m-%d>"
               :head ,head
               :olp ("Journal"))
              ("t" "do today" item
               #'org-roam-capture--get-point
               "[ ] %(princ as/agenda-captured-link)"
               :file-name "daily/%<%Y-%m-%d>"
               :head ,head
               :olp ("Do Today")
               :immediate-finish t)
              ("m" "maybe do today" item
               #'org-roam-capture--get-point
               "[ ] %(princ as/agenda-captured-link)"
               :file-name "daily/%<%Y-%m-%d>"
               :head ,head
               :olp ("Maybe Do Today")
               :immediate-finish t))))
#+end_src
** Org Directory
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!, end it with a slash "/"
#+begin_src emacs-lisp
(setq org-directory "~/Documents/gtd/")
#+end_src

** Agenda
*** custom commands [Inactive]
#+begin_src emacs-lisp :tangle no
(setq org-agenda-custom-commands
      '(("d" "Today"
         ((tags-todo "SCHEDULED<\"<+1d>\"&PRIORITY=\"A\""
                     ((org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "" ((org-agenda-span 1)
                      (org-scheduled-delay-days -14)
                      (org-agenda-overriding-header "Schedule")))
          (tags-todo "SCHEDULED<\"<+1d>\""
                     ((org-agenda-skip-function
                       '(or (org-agenda-skip-entry-if 'done)))
                      (org-agenda-overriding-header "Tasks:")))))))
#+end_src
*** Org super agenda mode
[[https://github.com/alphapapa/org-super-agenda][Documentation]]
This is the raw example
#+begin_src emacs-lisp 
(use-package! org-super-agenda
  :after org-agenda
  ;;:custom-face
  ;;(org-super-agenda-header ((default (:inherit propositum-agenda-heading))))

  :init
  (setq
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t
   org-agenda-include-deadlines t
   org-agenda-block-separator nil
   org-agenda-compact-blocks t
   org-agenda-start-day nil ;; i.e. today
   org-agenda-span 1
   org-agenda-start-on-weekday nil
   )

  (setq org-agenda-custom-commands
        '(("c" "Super view"
           (
            (agenda "" ((org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:name "Today"
                            :time-grid t
                            :date today
                            :order 1)
                           (:discard (:anything t))
                           ))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '(;;(:log t)
                            (:name "Important"
                             :priority "A"
                             :order 1
                             )
                            ;; College
                            (:name "College"
                             :tag "college"
                             :order 2
                             )
                            ;; (:name "Next"
                            ;;  :todo "STRT"
                            ;;  :order 2)
                            ;; ====schedules====== ;;
                            ;; (:name "habits"
                            ;;  :and (:habit t :scheduled today )
                            ;;  :order 13
                            ;;  )
                            (:name "Scheduled Soon"
                             :and (:scheduled future :not (:habit t))
                             :order 6)
                            (:name "Due Soon"
                             :deadline future
                             :order 6)
                            (:name "Missed"
                             :scheduled past
                             :deadline past
                             :order 7)
                            ;;==============================;;
                            (:name "Other Personal Life"
                             :tag "life"
                             :order 14
                             )
                            (:name "code"
                             :tag "code"
                             :order 15
                             )
                            (:name "Linux"
                             :tag "linux"
                             :order 16
                             )

                            (:discard (:habit t))
                            ))))))))
  :config
  (org-super-agenda-mode))
#+end_src
*** UI
#+begin_src emacs-lisp :tangle yes
(add-hook 'org-agenda-mode-hook 'elegant-agenda-mode)
#+end_src
** Org-Latex
*** Latex Image Preview options
#+begin_src emacs-lisp
'(org-format-latex-options
  (quote
   (:foreground default :background default :scale 0.5 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
    ("begin" "$1" "$" "$$" "\\(" "\\["))))
(set-default 'preview-scale-function 0.2)
#+end_src
Imagemagick since dvipng can't handle tikz \LaTeX
#+begin_src emacs-lisp
(setq org-latex-create-formula-image-program 'imagemagick)
#+end_src
*** Update Latex Fragments with font change
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(defun update-org-latex-fragments ()
  (org-latex-preview '(64))
  (plist-put org-format-latex-options :scale text-scale-mode-amount)
  (org-latex-preview '(16)))
(add-hook 'text-scale-mode-hook 'update-org-latex-fragments)
#+end_src
*** Tikz Preview
#+begin_src emacs-lisp
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
#+end_src
*** nice to be able to use cdlatex.
#+begin_src emacs-lisp
(after! org (add-hook 'org-mode-hook 'turn-on-org-cdlatex))
#+end_src
*** Now, by default, LSPs don’t really function at all in src blocks.
#+begin_src emacs-lisp
(cl-defmacro lsp-org-babel-enable (lang)
  "Support LANG in org source code block."
  (setq centaur-lsp 'lsp-mode)
  (cl-check-type lang stringp)
  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
             (setq file-name (make-temp-file "babel-lsp-")))
           (setq buffer-file-name file-name)
           (lsp-deferred)))
       (put ',intern-pre 'function-documentation
            (format "Enable lsp-mode in the buffer of org source block (%s)."
                    (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
             (,intern-pre info))
           (put ',edit-pre 'function-documentation
                (format "Prepare local buffer environment for org source block (%s)."
                        (upcase ,lang))))))))
(defvar org-babel-lang-list
  '("go" "python" "ipython" "bash" "sh"))
(dolist (lang org-babel-lang-list)
  (eval `(lsp-org-babel-enable ,lang)))
#+end_src
** Modes
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'mixed-pitch-mode)
(setq geiser-default-implementation  'guile)
#+end_src
** org-linkz
[[https://github.com/p-kolacz/org-linkz][p-kolacz/org-linkz]]
#+begin_src emacs-lisp
(setq org-html-validation-link nil)  ;; removes validation link from exported html file
(require 'org-protocol)
(setq org-capture-templates
        '(
          ("o" "Link capture" entry
           (file+headline (concat org-roam-directory "internet/Linkz.org") "INBOX")
           "* %a %U"
           :immediate-finish t)
))
(setq org-protocol-default-template-key "o")
#+end_src
* Elfeed
** Setup
*** Use Filter:
#+begin_src emacs-lisp
(setq-default elfeed-search-filter "@1-week-ago")
#+end_src

*** Source of Feeds
Takes feeds from Org-File
#+begin_src emacs-lisp
(setq rmh-elfeed-org-files (list "~/.doom.d/elfeed.org"))
#+end_src

*** Refresh Feed
Set up the url-queue variables for swift and complete operation. The
defaults are too bad. Especially /url-queue-timeout/ is way too short
for loading feeds.
#+begin_src emacs-lisp
(setf url-queue-parallel-processes 20
      url-queue-timeout 10)
#+end_src
** Key Maps
| KeyBinds | Usage         |
|----------+---------------|
| v        | Open With mpv |
| R        | Update Feed   |
| <f6>     | Close         |
| b        | browse url    |
| c        | clear filter  |
| s        | search live   |
| S        | set search    |

Search examples: `@1-week-ago +videos -linux` (+/- are used to filter tags)

#+begin_src emacs-lisp
(map!  :map elfeed-search-mode-map
       :n "v" 'elfeed-view-mpv
       :n "R" 'elfeed-update
       :n "G" 'evil-goto-line
       :n "<f6>" 'elfeed-close-prev-buffer
       :n "b" 'elfeed-search-browse-url
       :n "c" 'elfeed-search-clear-filter
       )
#+end_src

** Utils
*** elfeed-close-prev-buffer
Closing elfeed forwards to prev buffer
#+begin_src emacs-lisp
(defun elfeed-close-prev-buffer ()
  (interactive)
  "elfeed-kill and restore prev buffer"
  (elfeed-kill-buffer)
  (previous-buffer))
#+end_src

*** elfeed-view-mpv
(add-hook 'LaTeX-mode-hook (lambda () (yas-minor-mode -1)))
(add-hook 'LaTeX-mode-hook #'auto-fill-mode)
Run video in mpv
#+begin_src emacs-lisp

(defun elfeed-v-mpv (url title)
  "Watch a video from URL in MPV"
  (defvar cmd (format "mpv --ytdl-format=worst  '%s'" url))
  (save-window-excursion
    (async-shell-command cmd)
    (save-window-excursion
      (shell-command (format"notify-send 'Loading Video' '%s'" title)))
    (message "Video Loading")
    )
  )


(defun elfeed-view-mpv (&optional use-generic-p)
  "Youtube-feed link"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (elfeed-v-mpv it (elfeed-entry-title entry))) ;; print title
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
#+end_src
** Modes
#+begin_src emacs-lisp
 (add-hook 'elfeed-show-mode-hook #'mixed-pitch-mode)
#+end_src
* Languages
* Fixes
In case of Emacs28,
#+begin_src emacs-lisp
(when EMACS28+
  (add-hook 'latex-mode-hook #'TeX-latex-mode))
#+end_src
