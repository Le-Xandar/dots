#+TITLE: Config
#+STARTUP: content

* Info
#+begin_src emacs-lisp
;; DOOMDIR/config.el -*- lexical-binding: t; -*-
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
;;
#+end_src
* Global Settings
Place your private configuration here! Remember, you do not need to run 'doom
sync' after modifying this file!
** Private Config
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src emacs-lisp

(setq user-full-name "Westofer Raymond"
      user-mail-address "WestoferRaymond@gmail.com")

#+end_src
**  UI

Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ src_lisp{doom-font'}
+ src_lisp{doom-variable-pitch-font'}
+ src_lisp{doom-big-font'} -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

  They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
  font string. You generally only need these two:
*** Font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 11 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 11))
#+end_src
*** Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set src_elisp{`doom-theme'} or manually load a theme
with the src_elisp{`load-theme'} function. This is the default src_elisp{(setq
doom-theme 'doom-one)}
#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src
*** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
*** Neotree
Use Icons
#+begin_src emacs-lisp
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
#+end_src
** KeyBinds
*** Function row <F-{1-12}>
#+begin_src emacs-lisp
(map!
 ;; :n "<f5>" compile TODO: add compile
 :n "C-<f5>" 'compile-on-save-mode
 :n "<f6>" 'elfeed
 :n "<f8>" 'org-agenda
 ;; :n "<f7>" email TODO: Add email
 )
#+end_src
*** Function row With Modifiers <F-{1-12}>
#+begin_src emacs-lisp
(map!
 :n "C-<f5>" 'compile-on-save-mode
 )
#+end_src
*** Text Manipulation
**** C-h as backspace
#+begin_src emacs-lisp
(map! "C-h" 'backward-delete-char-untabify)
#+end_src
** Fill column
#+begin_src emacs-lisp
(setq-default fill-column 80)
#+end_src
* Org-Mode
** UI
*** hide the emphasis markup (e.g. /.../ for italics, *...* for bold, etc.):
#+begin_src emacs-lisp
  ;; (setq org-hide-emphasis-markers t)
#+end_src
*** Fonts
#+begin_src emacs-lisp :tangle no
  (let* ((variable-tuple
          (cond ((x-list-fonts "ETBembo")         '(:font "ETBembo"))
                ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
#+end_src
*** Agenda
**** custom commands
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("d" "Today"
         ((tags-todo "SCHEDULED<\"<+1d>\"&PRIORITY=\"A\""
                     ((org-agenda-skip-function
                       '(org-agenda-skip-entry-if 'todo 'done))
                      (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "" ((org-agenda-span 1)
                      (org-scheduled-delay-days -14)
                      (org-agenda-overriding-header "Schedule")))
          (tags-todo "SCHEDULED<\"<+1d>\""
                     ((org-agenda-skip-function
                       '(or (org-agenda-skip-entry-if 'done)))
                      (org-agenda-overriding-header "Tasks:")))))))
#+end_src
** Org Directory
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp
(setq org-directory "~/Documents/gtd/")
#+end_src

** Org-Latex
*** Latex Image Preview options
#+begin_src emacs-lisp
'(org-format-latex-options
  (quote
   (:foreground default :background default :scale 0.5 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
    ("begin" "$1" "$" "$$" "\\(" "\\["))))
(set-default 'preview-scale-function 0.2)
#+end_src
Imagemagick since dvipng can't handle tikz \LaTeX
#+begin_src emacs-lisp
(setq org-latex-create-formula-image-program 'imagemagick)
#+end_src
*** Update Latex Fragments with font change
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(defun update-org-latex-fragments ()
  (org-latex-preview '(64))
  (plist-put org-format-latex-options :scale text-scale-mode-amount)
  (org-latex-preview '(16)))
(add-hook 'text-scale-mode-hook 'update-org-latex-fragments)
#+end_src
*** Tikz Preview
#+begin_src emacs-lisp 
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
#+end_src
** ROAM
*** Setup
#+begin_src emacs-lisp
(use-package org-roam-server
  :after org-roam
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8078
        org-roam-server-export-inline-images t
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20)
  (defun org-roam-server-open ()
    "Ensure the server is active, then open the roam graph."
    (interactive)
    (unless (server-running-p)
      (org-roam-server-mode 1))
    (browse-url-xdg-open (format "http://localhost:%d" org-roam-server-port))))
#+end_src
*** Set Directory
#+begin_src emacs-lisp
(setq org-roam-directory "~/Documents/roam/")
#+end_src

* Programming Languages
** Rust
*** Use Rust Analyzer
#+begin_src emacs-lisp
(setq rustic-lsp-server 'rust-analyzer)
#+end_src
*** Use Racer
#+BEGIN_SRC bash :tangle no
rustup toolchain add nightly
rustup component add rust-src
cargo +nightly install racer
#+END_SRC
#+begin_src emacs-lisp
(add-hook 'rust-mode-hook #'racer-mode)
#+end_src
** Vue
Use VLS
https://genehack.blog/2020/08/web-mode-eglot-vetur-vuejs-=-happy/
#+begin_src emacs-lisp
(define-derived-mode genehack-vue-mode web-mode "ghVue"
  "A major mode derived from web-mode, for editing .vue files with LSP support.")

(require 'eglot)
(add-to-list 'auto-mode-alist '("\\.vue\\'" . genehack-vue-mode))
(add-hook 'genehack-vue-mode-hook #'eglot-ensure)
(add-to-list 'eglot-server-programs '(genehack-vue-mode "vls"))
#+end_src
** LaTeX
#+begin_src emacs-lisp

#+end_src
* Minor Modes
** company-mode
*** Use The Same Case
#+begin_src emacs-lisp
(setq company-dabbrev-downcase nil)
(setq company-dabbrev-ignore-case t)
#+end_src

*** Set Completion Delay and prefix length
#+begin_src emacs-lisp
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 1)
#+end_src
*** Backends
#+begin_src emacs-lisp
(add-to-list 'company-backends 'company-yasnippet)
(add-to-list 'company-backends 'company-dabbrev-code)
(add-to-list 'company-backends 'company-capf)
(add-to-list 'company-backends 'company-keywords)
(add-to-list 'company-backends 'company-files)
#+end_src

** compile-on-save
Hint: Uses Ctrl-<F5>
#+begin_src emacs-lisp
(defun compile-on-save-start ()
  (let ((buffer (compilation-find-buffer)))
    (unless (get-buffer-process buffer)
      (recompile))))

(define-minor-mode compile-on-save-mode
  "Minor mode to automatically call `recompile' whenever the
current buffer is saved. When there is ongoing compilation,
nothing happens."
  :lighter " CoS"
  (if compile-on-save-mode
      (progn  (make-local-variable 'after-save-hook)
              (add-hook 'after-save-hook 'compile-on-save-start nil t))
    (kill-local-variable 'after-save-hook)))
#+end_src

* Elfeed
** Setup
*** Use Filter:
#+begin_src emacs-lisp
(setq-default elfeed-search-filter "@1-week-ago")
#+end_src

*** Source of Feeds
Takes feeds from Org-File
#+begin_src emacs-lisp
(setq rmh-elfeed-org-files (list "~/.doom.d/elfeed.org"))
#+end_src

*** Refresh Feed
 Set up the url-queue variables for swift and complete operation. The
 defaults are too bad. Especially /url-queue-timeout/ is way too short
 for loading feeds.
 #+begin_src emacs-lisp
(setf url-queue-parallel-processes 20
      url-queue-timeout 10)
 #+end_src
** Key Maps
| KeyBinds | Usage         |
|----------+---------------|
| v        | Open With mpv |
| R        | Update Feed   |
| <f6>     | Close         |
| b        | browse url    |
| c        | clear filter  |
| s        | search live   |
| S        | set search    |

Search examples: `@1-week-ago +videos -linux` (+/- are used to filter tags)

#+begin_src emacs-lisp
(map!  :map elfeed-search-mode-map
       :n "v" 'elfeed-view-mpv
       :n "R" 'elfeed-update
       :n "G" 'evil-goto-line
       :n "<f6>" 'elfeed-close-prev-buffer
       :n "b" 'elfeed-search-browse-url
       :n "c" 'elfeed-search-clear-filter
       )
#+end_src

** Utils
*** elfeed-close-prev-buffer
Closing elfeed forwards to prev buffer
#+begin_src emacs-lisp
(defun elfeed-close-prev-buffer ()
  (interactive)
  "elfeed-kill and restore prev buffer"
  (elfeed-kill-buffer)
  (previous-buffer))
#+end_src

*** elfeed-view-mpv
Run video in mpv
#+begin_src emacs-lisp

(defun elfeed-v-mpv (url title)
  "Watch a video from URL in MPV"
  (defvar cmd (format "mpv --ytdl-format=worst  '%s'" url))
  (save-window-excursion
    (async-shell-command cmd)
    (save-window-excursion
      (shell-command (format"notify-send 'Loading Video' '%s'" title)))
    (message "Video Loading")
    )
  )


(defun elfeed-view-mpv (&optional use-generic-p)
  "Youtube-feed link"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (elfeed-v-mpv it (elfeed-entry-title entry))) ;; print title
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
#+end_src
